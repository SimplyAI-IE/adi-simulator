@page "/take-exam"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@using AdiExamSimulator.Client.Models

<h3>Take Exam</h3>

@if (Questions == null)
{
    <p>Loading exam...</p>
}
else
{
    <p>Question @((CurrentIndex + 1)) of @Questions.Count</p>

    <div class="mb-3">
        <strong>@Questions[CurrentIndex].QuestionText</strong>
    </div>

    <div class="form-check">
        <input type="radio" class="form-check-input" id="A" name="option" checked="@IsSelected("A")" @onclick="@(() => SelectAnswer("A"))" />
        <label class="form-check-label" for="A">@Questions[CurrentIndex].OptionA</label>
    </div>

    <div class="form-check">
        <input type="radio" class="form-check-input" id="B" name="option" checked="@IsSelected("B")" @onclick="@(() => SelectAnswer("B"))" />
        <label class="form-check-label" for="B">@Questions[CurrentIndex].OptionB</label>
    </div>

    <div class="form-check">
        <input type="radio" class="form-check-input" id="C" name="option" checked="@IsSelected("C")" @onclick="@(() => SelectAnswer("C"))" />
        <label class="form-check-label" for="C">@Questions[CurrentIndex].OptionC</label>
    </div>

    <div class="form-check">
        <input type="radio" class="form-check-input" id="D" name="option" checked="@IsSelected("D")" @onclick="@(() => SelectAnswer("D"))" />
        <label class="form-check-label" for="D">@Questions[CurrentIndex].OptionD</label>
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary me-2" @onclick="PreviousQuestion" disabled="@(CurrentIndex == 0)">Previous</button>
        <button class="btn btn-secondary me-2" @onclick="NextQuestion" disabled="@(CurrentIndex == Questions.Count - 1)">Next</button>

        @if (CurrentIndex == Questions.Count - 1)
        {
            <button class="btn btn-success" @onclick="SubmitExam">Submit Exam</button>
        }
    </div>
}

@code {
    private List<Question>? Questions;
    private List<string?> Answers = new();
    private int CurrentIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        Questions = await LocalStorage.GetItemAsync<List<Question>>("currentExam");

        if (Questions == null)
        {
            Navigation.NavigateTo("/start-exam");
            return;
        }

        Answers = Enumerable.Repeat<string?>(null, Questions.Count).ToList();
    }

    private void NextQuestion()
    {
        if (Questions != null && CurrentIndex < Questions.Count - 1)
            CurrentIndex++;
    }

    private void PreviousQuestion()
    {
        if (CurrentIndex > 0)
            CurrentIndex--;
    }

    private void SelectAnswer(string option)
    {
        Answers[CurrentIndex] = option;
    }

    private bool IsSelected(string option)
    {
        return Answers[CurrentIndex] == option;
    }

    private async Task SubmitExam()
    {
        var examData = new ExamData
        {
            Questions = Questions,
            Answers = Answers
        };

        await LocalStorage.SetItemAsync("examResult", examData);
        Navigation.NavigateTo("/results");
    }

    public class ExamData
    {
        public List<Question>? Questions { get; set; }
        public List<string?> Answers { get; set; } = new();
    }
}
